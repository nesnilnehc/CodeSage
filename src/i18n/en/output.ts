export const OUTPUT = {
    EXTENSION: {
        ACTIVATE: 'CodeKarmic extension is now active',
        DEACTIVATE: 'CodeKarmic extension is now deactivated'
    },
    REVIEW: {
        REVIEW_START: 'Starting code review:',
        REVIEW_COMPLETE: 'Code analysis completed:',
        REVIEW_ERROR: 'Code review failed:',
        REVIEW_IN_PROGRESS: 'Code review in progress...',
        REVIEW_SUCCESS: 'Code review successful:',
        REVIEW_FAILED: 'Code review failed with errors:',
        CODE_ANALYSIS_FAILED: 'Code analysis failed:',
        REVIEWING_FILES: 'Reviewing files...',
        AI_ANALYSIS: 'Running AI analysis...',
        NO_COMMIT_SELECTED: 'No commit selected',
        NO_REVIEW_DATA: (path: string): string => `No review data available for file: ${path}`,
        REPORT_GENERATION_FAILED: 'Failed to generate review report',
        LARGE_FILE_COMPRESSION: 'Compressing large file for more efficient analysis...',
        AI_SERVICE_NOT_INITIALIZED: 'AI model service not initialized',
        EMPTY_DIFF_CONTENT: 'Empty or invalid diff content',
        FILE_TYPE_NOT_SUPPORTED: (path: string): string => `File type not supported for code review: ${path}`,
        FULL_FILE_ANALYSIS_START: 'Starting full file analysis...',
        FULL_FILE_ANALYSIS_COMPLETE: (length: number): string => `Full file analysis completed, response length: ${length}`,
        DIFF_ANALYSIS_START: 'Starting diff analysis...',
        DIFF_ANALYSIS_COMPLETE: (length: number): string => `Diff analysis completed, response length: ${length}`
    },
    REPOSITORY: {
        REPO_INIT: (repoPath: string): string => `Initialized with repository: ${repoPath}`,
        REPO_COMMIT_SELECT: 'Selected commit:',
        REPO_COMMIT_NONE: 'No commit selected',
        INITIALIZE_REPO: 'Initializing repository:',
        SELECT_COMMIT: (commitId: string, message: string): string => `Selecting commit: ${commitId} (${message})`,
        NO_COMMIT: 'No commit selected',
        USING_CACHED_COMMIT: 'Using cached commit:',
        REPORT_IN_PROGRESS: 'Report generation is already in progress, please wait...',
        REPO_NOT_FOUND: (path: string): string => `Repository not found at path: ${path}`,
        COMMIT_NOT_FOUND: (hash: string): string => `Commit not found: ${hash}`,
        DIFF_GENERATION_FAILED: (path: string): string => `Failed to generate diff for file: ${path}`,
        FILE_CONTENT_UNAVAILABLE: 'File content unavailable',
        BRANCH_NOT_FOUND: (branch: string): string => `Branch not found: ${branch}`,
        NOT_GIT_REPOSITORY: 'The current workspace is not a Git repository',
        NO_WORKSPACE_FOLDER: 'No workspace folder open',
        REFRESHING_COMMITS: 'Refreshing commits...',
        REFRESH_COMMITS_ERROR: 'Failed to refresh commits',
        REFRESH_FILES_ERROR: 'Failed to refresh files',
        COMMIT_SELECTION_ERROR: 'Error selecting commit',
        VIEWING_FILE: 'Viewing file:',
        FILE_NOT_FOUND_ERROR: 'File not found',
        SHOWING_DIFF_ERROR: 'Error showing diff'
    },
    GIT: {
        GETTING_FILE_CONTENT: (filePath: string, commitHash: string): string => `Getting file content for ${filePath} at commit ${commitHash}`,
        GETTING_FILE_DIFF: (filePath: string, commitHash: string): string => `Getting file diff for ${filePath} at commit ${commitHash}`,
        SETTING_DATE_FILTER: (since: string, until: string): string => `Setting date filter: from ${since} to ${until}`,
        SETTING_BRANCH_FILTER: (branch: string): string => `Setting branch filter: ${branch}`,
        EMPTY_FILTER: 'no filter',
        CLEARING_FILTERS: 'Clearing filters',
        GETTING_FILES_FOR_COMMIT: (commitHash: string): string => `Getting files for commit ${commitHash}`,
        FOUND_FILES_FOR_COMMIT_I18N: (filesChanged: number, commitHash: string): string => `Found ${filesChanged} files for commit ${commitHash}`,
        GETTING_COMMITS_WITH_SIMPLE_GIT: (filter: string): string => `Getting commits with simple-git: ${filter}`,
        CALLING_SIMPLE_GIT_LOG_I18N: (logOptions: string): string => `Calling simple-git log with options: ${logOptions}`,
        SIMPLE_GIT_LOG_RETURNED: (length: number): string => `Simple-git log returned ${length} commits`,
        GETTING_COMMITS_WITH_DIRECT_COMMAND: (filter: string): string => `Getting commits with direct command: ${filter}`,
        USING_SIMPLE_GIT_DIFF: 'Method 1: Trying to get file diff using simple-git diff...',
        SUCCESSFULLY_GOT_DIFF_USING_SIMPLE_GIT_DIFF: 'Successfully got diff using simple-git diff',
        DIFF_CONTENT_PREVIEW: (preview: string, total: number): string => `Diff content preview:\n${preview}... (${total} characters total)`,
        NO_DIFF_CONTENT: 'No diff content available',
        EMPTY_DIFF_RESULT_FROM_SIMPLE_GIT_DIFF: 'Empty diff result from simple-git diff, trying next method...',
        USING_DIRECT_GIT_COMMAND_WITH_DIFF: 'Method 2: Trying to get file diff using direct git command...',
        SUCCESSFULLY_GOT_DIFF_USING_DIRECT_GIT_COMMAND: 'Successfully got diff using direct git command',
        EMPTY_DIFF_RESULT_FROM_DIRECT_GIT_COMMAND: 'Empty diff result from direct git command, trying next method...',
        USING_MANUAL_DIFF: 'Method 3: Trying to get file content at both commits and create diff manually...',
        SUCCESSFULLY_CREATED_MANUAL_DIFF: 'Successfully created manual diff',
        COULD_NOT_CREATE_MANUAL_DIFF: 'Could not create manual diff, file content unavailable',
        ALL_METHODS_FAILED_TO_GET_FILE_DIFF: (allErrors: string): string => `All methods to get file diff failed:\n${allErrors}`,
        ERROR_GETTING_FILE_DIFF: (error: string): string => `Error getting file diff: ${error}`,
        ERROR_GETTING_FILE_CONTENT: (error: string): string => `Error getting file content: ${error}`,
        ERROR_GETTING_FILES_FOR_COMMIT: (error: string): string => `Error getting files for commit: ${error}`,
        FALLBACK_METHOD_FAILED: (error: string): string => `Fallback method also failed: ${error}`,
        ERROR_GETTING_FILE_DIFF_WITH_SIMPLE_GIT: (error: string): string => `Error getting file diff with simple-git diff: ${error}`,
        ERROR_GETTING_FILE_DIFF_WITH_DIRECT_COMMAND: (error: string): string => `Error getting file diff with direct git command: ${error}`,
        ERROR_CREATING_MANUAL_DIFF: (error: string): string => `Error creating manual diff: ${error}`,
        GIT_NOT_INITIALIZED: 'Git not initialized',
        FAILED_TO_GET_COMMITS: 'Failed to get commits',
        FAILED_TO_GET_COMMIT: 'Failed to get commit',
        FAILED_TO_GET_BRANCHES: 'Failed to get branches',
        ERROR_GETTING_COMMIT_BY_ID_WITH_DIRECT_COMMAND: (error: string): string => `Error getting commit by ID with direct command: ${error}`,
        FAILED_TO_SET_REPOSITORY: 'Failed to set repository',
        ERROR_GETTING_COMMIT_FILES: 'Error getting commit files',
        ERROR_CHECKING_GIT_REPOSITORY: 'Error checking if git repository',
        ERROR_GETTING_COMMIT_FILE_CONTENT: (file: string): string => `Error getting content for file ${file}`,
        GETTING_COMMITS_WITH_FILTER: (filter: string): string => `Getting commits with filter: ${filter}`,
        RETURNING_CACHED_COMMITS: (count: number): string => `Returning ${count} cached commits`,
        GOT_COMMITS_SIMPLE_GIT: (count: number): string => `Got ${count} commits using simple-git`,
        ERROR_GETTING_COMMITS_SIMPLE_GIT: 'Error getting commits with simple-git',
        TRYING_GET_COMMITS_DIRECT: 'Trying to get commits using direct git command...',
        GOT_COMMITS_DIRECT: (count: number): string => `Got ${count} commits using direct git command`,
        ERROR_GETTING_COMMITS: 'Error getting commits',
        GETTING_COMMIT_BY_ID: 'Getting commit by ID: {commitId}',
        FOUND_COMMIT_IN_CACHE: 'Found commit {commitId} in cache',
        TRYING_GET_COMMIT_SIMPLE_GIT: 'Trying to get commit using simple-git...',
        ERROR_GETTING_COMMIT_SIMPLE_GIT: 'Error getting commit with simple-git',
        TRYING_GET_COMMIT_DIRECT: 'Trying to get commit using direct git command...',
        ERROR_GETTING_COMMIT_BY_ID: 'Error getting commit by ID',
        GETTING_BRANCHES: 'Getting branches',
        TRYING_GET_BRANCHES_SIMPLE_GIT: 'Trying to get branches using simple-git...',
        ERROR_GETTING_BRANCHES_SIMPLE_GIT: 'Error getting branches with simple-git',
        TRYING_GET_BRANCHES_DIRECT: 'Trying to get branches using direct git command...',
        ERROR_GETTING_BRANCHES: 'Error getting branches'
    },
    COMMIT_EXPLORER: {
        NO_WORKSPACE_FOLDER: 'No workspace folder open',
        NO_WORKSPACE_DESCRIPTION: 'Please open a Git repository folder',
        USING_REPOSITORY_PATH: (path: string): string => `Using repository path: ${path}`,
        FETCHING_COMMITS: 'Fetching commits from repository...',
        REPOSITORY_SET_SUCCESS: 'Repository set successfully',
        ERROR_SETTING_REPOSITORY: (error: string): string => `Error setting repository: ${error}`,
        FOUND_COMMITS: (count: string): string => `Found ${count} commits`,
        ERROR_FETCHING_COMMITS: (error: string): string => `Error fetching commits: ${error}`,
        ERROR_GET_CHILDREN: (error: string): string => `Error in getChildren: ${error}`,
        NO_COMMITS_FOUND: 'No commits found',
        NO_COMMITS_DESCRIPTION: 'Try a different repository or branch',
        LOADING: 'Loading commits...',
        LOADING_DESCRIPTION: 'Please wait...',
        ERROR_PREFIX: (message: string): string => `Error: ${message}`,
        ERROR_DESCRIPTION: 'See console for details'
    },
    FILE_EXPLORER: {
        NO_COMMIT_SELECTED: 'No commit selected in FileExplorerProvider',
        COMMIT_NO_FILES: (hash: string): string => `Selected commit ${hash} has no files`,
        SHOWING_FILES: (count: string, hash: string): string => `FileExplorerProvider: showing ${count} files for commit ${hash}`,
        NO_WORKSPACE_FOLDER: 'No workspace folder open',
        REPOSITORY_PATH_UNDEFINED: 'Repository path is undefined',
        ERROR_INITIALIZING_GIT: (error: string): string => `Error initializing Git service: ${error}`,
        COMMIT_FILES: (files: string): string => `Commit Files: ${files}`,
        FILE_PATH_AND_INFO: (path: string, info: string): string => `File Path: ${path}, File Info: ${info}`,
        CREATING_FILE_TREE_ITEM: (path: string, status: string): string => `Creating FileTreeItem for: ${path} with status: ${status}`
    },
    FILE: {
        FILE_OPEN: 'Opened file:',
        FILE_NEW_REVIEW: 'Created new review for file:',
        FILE_NOT_FOUND: 'No files found in commit',
        FILE_FOUND_TO_REVIEW: 'Found files to review',
        FILE_REVIEWING: 'Reviewing files...',
        FILE_DIFF_ERROR: 'Failed to generate diff content',
        NO_FILES: 'No files found to review',
        FILES_TO_REVIEW: 'Number of files to review:',
        OPEN_FILE: 'Opening file:',
        NEW_REVIEW: 'Creating new review:',
        NOT_FOUND: (path: string): string => `File not found: ${path}`,
        READING_ERROR: (path: string): string => `Error reading file: ${path}`,
        WRITING_ERROR: (path: string): string => `Error writing file: ${path}`
    },
    PROCESS: {
        PROC_BATCH: (batch: number, total: number): string => `Processing batch ${batch}/${total}`,
        PROC_FILES: (processed: number, total: number): string => `Processed ${processed}/${total} files`,
        PROC_AI_ANALYSIS: (filePath: string): string => `Performing AI analysis for ${filePath}...`,
        PROC_COMMENT_ADD: 'Added comment to file',
        PROC_AI_SUGGEST: 'Added AI suggestion to file',
        PROC_QUALITY_SCORE: 'Set code quality score for file',
        CONSTRUCTOR_CALLED: 'Service initialized:',
        SET_QUALITY_SCORE: 'Setting quality score:',
        ADD_COMMENT: 'Add comment:',
        ESTIMATED_TIME_REMAINING: 'Estimated time remaining'
    },
    REPORT: {
        REPORT_GENERATE: 'Generating code review report...',
        REPORT_SAVE: 'Saving review data...',
        REVIEW_DATA_SAVED_IN_MEMORY: 'Saving review data in memory...',
        REPORT_COMPLETE: 'Report generation completed, took',
        GENERATE_REPORT: 'Generating review report...',
        GENERATE_REPORT_FOR_COMMIT: (commitId: string): string => `Generating review report for commit ${commitId}...`,
        AI_ANALYSIS_PROGRESS: (current: number, total: number, percentage: number): string => `AI analysis progress: ${current}/${total} files (${percentage.toFixed(1)}%)`,
        REPORT_GENERATION_PROGRESS: (current: number, total: number, percentage: number): string => `Report generation progress: ${current}/${total} files (${percentage.toFixed(1)}%)`,
        REPORT_COMPLETED: (seconds: number): string => `Report generation completed, took ${seconds.toFixed(1)} seconds`,
        REPORT_GENERATED_FOR_COMMIT: (commitId: string): string => `Report generated for commit ${commitId}`,
        REPORT_SAVED_TO: (filePath: string): string => `Report saved to: ${filePath}`
    },
    COMMON: {
        MSG_DETAILS: 'Details:',
        SECONDS: 'seconds',
        FILE_PREFIX: 'File-'
    },
    MODEL: {
        UNSUPPORTED_MODEL_TYPE: (type: string): string => `Unsupported model type: ${type}`,
        API_ERROR: (message: string): string => `API Error: ${message}`,
        VALIDATION_FAILED: 'API key validation failed',
        MISSING_API_KEY: 'API key not configured',
        API_KEY_VALIDATION_ERROR: 'API key validation error'
    },
    DEBUG: {
        EXTENSION_ACTIVE: 'CodeKarmic extension is now active',
        REVIEWING_CODE: 'Reviewing code for',
        GENERATING_REPORT: 'Extension: generating report for commit',
        SETTING_REPO_PATH: 'Setting repository path:',
        USING_EXISTING_REPO: 'Using existing repository:',
        ERROR_DETAILS: 'Code review error details:'
    }
};
